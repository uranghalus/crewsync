// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  HRD
  USER
  SPV
  ADMIN
}

enum STATUS {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  hash          String?
  salt          String?
  role          ROLE      @default(USER)

  departmentId Int
  accounts     Account[]

  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Department {
  id              Int      @id @default(autoincrement())
  department_name String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  User User[]
}
